version: 2.1

_parallelism: &parallelism 3

orbs:
  hmpps: ministryofjustice/hmpps@3.2
  node: circleci/node@5.0.0

parameters:
  invoked-by:
    type: string
    default: repo
  check-docker:
    type: boolean
    default: true
  check-dev:
    type: boolean
    default: true
  check-preprod:
    type: boolean
    default: false

jobs:
  check-docker:
    machine:
      image: ubuntu-2004:202111-02
    resource_class: large
    parallelism: *parallelism
    steps:
      - checkout
      - run:
          name: Build, pull and run docker containers
          command: |
            docker-compose build
            docker-compose pull
            docker-compose up -d
      - restore_cache:
          keys:
            - v2-deps-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
            - v2-deps-{{ arch }}-{{ .Branch }}
            - v2-deps-{{ arch }}
      - run:
          name: Install correct node/npm and dependencies
          command: |
            node_version=$(jq -r '.engines.node' <package.json)
            nvm install $node_version
            nvm alias default $node_version
            node -v

            npm install -g npm@$(jq -r '.engines.npm' <package.json)
            npm -v

            npm ci
      - save_cache:
          key: v2-deps-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ~/.npm
            - ~/.cache
      - run:
          name: Check HMPPS Auth is running
          command: |
            docker run --network host \
              docker.io/jwilder/dockerize \
              -wait http://localhost:9090/auth/health \
              -wait-retry-interval 2s \
              -timeout 60s
      - run:
          name: Run Cypress tests
          command: |
            nvm use $(jq -r '.engines.node' <package.json)

            SPECS=$(circleci tests glob cypress/integration/*.feature | circleci tests split --split-by=timings | tr "\n" "," | tr " " ",")
            echo "Running feature spec(s): ${SPECS}"

            set +e

            npx cypress run \
              --config baseUrl=http://localhost:3000 \
              --browser chrome \
              --record false \
              --spec $SPECS

            export E2E_RESULT=$?
            npm run cypress:report

            set -e
            exit $E2E_RESULT
      - run:
          name: "Failure: output container logs to console"
          command: |
            docker-compose logs
          when: on_fail
      - run:
          name: Stop docker containers
          command: docker-compose stop
      - store_artifacts:
          path: cypress/screenshots
          destination: screenshots
      - store_artifacts:
          path: cypress/reports
          destination: reports
      - store_test_results:
          path: cypress/junit

  check-env:
    docker:
      - image: cypress/browsers:node16.13.2-chrome97-ff96
    resource_class: large
    parallelism: *parallelism
    parameters:
      environment:
        type: string
        default: dev
    steps:
      - checkout
      - run:
          name: Update NPM to match package.json
          command: apt install -y jq && npm install -g npm@$(jq -r '.engines.npm' < package.json)
      - node/install-packages
      - run:
          name: Wait for exclusive lock [check-<< parameters.environment >>-<< pipeline.parameters.invoked-by >>]
          command:
            ./scripts/do-exclusively --job check-<< parameters.environment >>-<< pipeline.parameters.invoked-by >> echo "Kicking off cypress tests..."
      - run:
          name: Run Cypress tests [<< parameters.environment >> - invoked by << pipeline.parameters.invoked-by >>]
          command: |
            SPECS=$(circleci tests glob cypress/integration/*.feature | circleci tests split --split-by=timings | tr "\n" "," | tr " " ",")
            echo "Running feature spec(s): ${SPECS}"

            set +e

            npx cypress run \
              --env USERNAME=${CYPRESS_USERNAME_<< pipeline.parameters.invoked-by >>_<< parameters.environment >>},PASSWORD=${CYPRESS_PASSWORD_<< pipeline.parameters.invoked-by >>_<< parameters.environment >>},NOMS_NUMBER=${NOMS_NUMBER_<< parameters.environment >>} \
              --config baseUrl=https://manage-recalls-<< parameters.environment >>.hmpps.service.justice.gov.uk \
              --browser chrome \
              --record false \
              --spec $SPECS

            export E2E_RESULT=$?

            # Store results in the workspace for a collection step later
            mkdir -p workspace/env-output
            echo "${E2E_RESULT}" > "workspace/env-output/E2E_RESULT_${CIRCLE_NODE_INDEX}"
            echo "${CIRCLE_NODE_TOTAL}" > "workspace/env-output/TOTAL_NODES"

            npm run cypress:report

            # NOTE: We *always* exit cleanly here so we can report results, we'll use the exit code later
            exit 0
      - persist_to_workspace:
          root: workspace
          paths:
            - env-output
      - store_artifacts:
          path: cypress/screenshots
          destination: screenshots
      - store_artifacts:
          path: cypress/reports
          destination: reports
      - store_test_results:
          path: cypress/junit

  test-bash-scripts:
    executor: hmpps/default
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./test/bats/bin/bats test/

  report-results:
    executor: hmpps/default
    parameters:
      environment:
        type: string
        default: dev
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Report results for << parameters.environment >>
          command: |
            export RESULTS_DIR=workspace/env-output
            E2E_RESULT=$(./scripts/collect-results.sh)
            echo "Overall E2E exit code: ${E2E_RESULT}"

            echo "Reporting results to dashboard..."
            SUCCESSFUL=false
            if [ ${E2E_RESULT} -eq 0 ]; then
              SUCCESSFUL=true
            fi
            ./scripts/report-results-to-dashboard.sh -e << parameters.environment >> -s ${SUCCESSFUL}

            exit ${E2E_RESULT}

workflows:
  version: 2
  build:
    when: << pipeline.parameters.check-docker >>
    jobs:
      - test-bash-scripts

  check-docker:
    when: << pipeline.parameters.check-docker >>
    jobs:
      - check-docker

  check-dev:
    when: << pipeline.parameters.check-dev >>
    jobs:
      - check-env:
          name: check-dev-<< pipeline.parameters.invoked-by >>
          environment: dev
      - report-results:
          environment: dev
          requires:
            - check-dev-<< pipeline.parameters.invoked-by >>

  check-preprod:
    when: << pipeline.parameters.check-preprod >>
    jobs:
      - check-env:
          name: check-preprod-<< pipeline.parameters.invoked-by >>
          environment: preprod
      - report-results:
          environment: preprod
          requires:
            - check-preprod-<< pipeline.parameters.invoked-by >>
